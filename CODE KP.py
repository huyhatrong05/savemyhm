"""
–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞
–í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ö —Ä–∞–±–æ—Ç—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
"""

print("=" * 60)
print("–ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê –ü–û –ê–õ–ì–û–†–ò–¢–ú–ê–ú")
print("=" * 60)

# =============================================================================
# –ê–õ–ì–û–†–ò–¢–ú–´ –°–û–†–¢–ò–†–û–í–ö–ò
# =============================================================================

print("\n" + "=" * 50)
print("–ê–õ–ì–û–†–ò–¢–ú–´ –°–û–†–¢–ò–†–û–í–ö–ò")
print("=" * 50)

# -----------------------------------------------------------------------------
# 1. –ë–õ–û–ß–ù–ê–Ø (–ö–û–†–ó–ò–ù–ù–ê–Ø) –°–û–†–¢–ò–†–û–í–ö–ê
# -----------------------------------------------------------------------------
def bucket_sort(arr):
    """
    –ë–ª–æ—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–æ—Ä–∑–∏–Ω–∞–º
    """
    if len(arr) == 0:
        return arr
    
    # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    num_buckets = len(arr)
    buckets = [[] for _ in range(num_buckets)]
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–æ—Ä–∑–∏–Ω–∞–º
    for num in arr:
        index = int(num * num_buckets)  # –î–ª—è —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1)
        buckets[index].append(num)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ—Ä–∑–∏–Ω—É
    for bucket in buckets:
        bucket.sort()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
    k = 0
    for bucket in buckets:
        for num in bucket:
            arr[k] = num
            k += 1
    return arr

print("\n--- –ë–ª–æ—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Bucket Sort) ---")
arr1 = [0.42, 0.32, 0.33, 0.52, 0.37, 0.47, 0.51]
print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {arr1}")
result1 = bucket_sort(arr1.copy())
print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {result1}")

# -----------------------------------------------------------------------------
# 2. –ë–õ–ò–ù–ù–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê
# -----------------------------------------------------------------------------
def pancake_sort(arr):
    """
    –ë–ª–∏–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—ã —á–∞—Å—Ç–µ–π –º–∞—Å—Å–∏–≤–∞
    """
    n = len(arr)
    for i in range(n, 0, -1):
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
        max_index = arr.index(max(arr[:i]))
        
        # –ï—Å–ª–∏ –º–∞–∫—Å–∏–º—É–º –Ω–µ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        if max_index != i - 1:
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
            arr = arr[:max_index+1][::-1] + arr[max_index+1:]
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—é –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å
            arr = arr[:i][::-1] + arr[i:]
    return arr

print("\n--- –ë–ª–∏–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Pancake Sort) ---")
arr2 = [3, 1, 4, 2, 5]
print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {arr2}")
result2 = pancake_sort(arr2.copy())
print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {result2}")

# -----------------------------------------------------------------------------
# 3. –°–û–†–¢–ò–†–û–í–ö–ê –ë–£–°–ò–ù–ê–ú–ò (–ì–†–ê–í–ò–¢–ê–¶–ò–û–ù–ù–ê–Ø)
# -----------------------------------------------------------------------------
def bead_sort(arr):
    """
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É—Å–∏–Ω–∞–º–∏ - –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –±—É—Å–∏–Ω –ø–æ–¥ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π
    """
    if not arr:
        return []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    max_val = max(arr)
    
    # –°–æ–∑–¥–∞—ë–º –º–∞—Ç—Ä–∏—Ü—É –±—É—Å–∏–Ω
    beads = [[0] * max_val for _ in range(len(arr))]
    
    # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –±—É—Å–∏–Ω—ã
    for i, num in enumerate(arr):
        for j in range(num):
            beads[i][j] = 1
    
    # –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è: –±—É—Å–∏–Ω—ã –ø–∞–¥–∞—é—Ç –≤–Ω–∏–∑
    for j in range(max_val):
        sum_col = sum(beads[i][j] for i in range(len(arr)))
        for i in range(len(arr)):
            beads[i][j] = 1 if i < sum_col else 0
    
    # –°—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for i in range(len(arr)):
        arr[i] = sum(beads[i])
    
    return arr

print("\n--- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É—Å–∏–Ω–∞–º–∏ (Bead Sort) ---")
arr3 = [3, 1, 4, 2]
print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {arr3}")
result3 = bead_sort(arr3.copy())
print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {result3}")

# =============================================================================
# –ê–õ–ì–û–†–ò–¢–ú–´ –ü–û–ò–°–ö–ê
# =============================================================================

print("\n" + "=" * 50)
print("–ê–õ–ì–û–†–ò–¢–ú–´ –ü–û–ò–°–ö–ê")
print("=" * 50)

# -----------------------------------------------------------------------------
# 4. –ü–û–ò–°–ö –°–ö–ê–ß–ö–ê–ú–ò
# -----------------------------------------------------------------------------
import math

def jump_search(arr, x):
    """
    –ü–æ–∏—Å–∫ —Å–∫–∞—á–∫–∞–º–∏ - –ø—Ä—ã–≥–∞–µ—Ç —á–µ—Ä–µ–∑ ‚àön —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    n = len(arr)
    if n == 0:
        return -1
    
    step = int(math.sqrt(n))
    prev = 0
    
    # –ü—Ä—ã–∂–∫–∏ –≤–ø–µ—Ä—ë–¥
    while prev < n and arr[min(step, n) - 1] < x:
        prev = step
        step += int(math.sqrt(n))
        if prev >= n:
            return -1
    
    # –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–ª–æ–∫–µ
    for i in range(prev, min(step, n)):
        if arr[i] == x:
            return i
    return -1

print("\n--- –ü–æ–∏—Å–∫ —Å–∫–∞—á–∫–∞–º–∏ (Jump Search) ---")
arr4 = [1, 3, 5, 7, 9, 11, 13, 15, 17]
x4 = 9
print(f"–ú–∞—Å—Å–∏–≤: {arr4}")
print(f"–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç: {x4}")
result4 = jump_search(arr4, x4)
print(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {result4}")

# -----------------------------------------------------------------------------
# 5. –≠–ö–°–ü–û–ù–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö
# -----------------------------------------------------------------------------
def exponential_search(arr, x):
    """
    –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - —Å–æ—á–µ—Ç–∞–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    """
    n = len(arr)
    if n == 0:
        return -1
    
    if arr[0] == x:
        return 0
    
    i = 1
    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    while i < n and arr[i] <= x:
        i *= 2
    
    # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [i/2, min(i, n)]
    low = i // 2
    high = min(i, n - 1)
    
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return -1

print("\n--- –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (Exponential Search) ---")
arr5 = [1, 3, 5, 7, 9, 11, 13, 15, 17]
x5 = 11
print(f"–ú–∞—Å—Å–∏–≤: {arr5}")
print(f"–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç: {x5}")
result5 = exponential_search(arr5, x5)
print(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {result5}")

# -----------------------------------------------------------------------------
# 6. –¢–ï–†–ù–ê–†–ù–´–ô –ü–û–ò–°–ö
# -----------------------------------------------------------------------------
def ternary_search(arr, l, r, x):
    """
    –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ - –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏
    """
    if r >= l:
        mid1 = l + (r - l) // 3
        mid2 = r - (r - l) // 3
        
        if arr[mid1] == x:
            return mid1
        if arr[mid2] == x:
            return mid2
        
        if x < arr[mid1]:
            return ternary_search(arr, l, mid1 - 1, x)
        elif x > arr[mid2]:
            return ternary_search(arr, mid2 + 1, r, x)
        else:
            return ternary_search(arr, mid1 + 1, mid2 - 1, x)
    return -1

print("\n--- –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (Ternary Search) ---")
arr6 = [1, 3, 5, 7, 9, 11, 13, 15, 17]
x6 = 7
print(f"–ú–∞—Å—Å–∏–≤: {arr6}")
print(f"–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç: {x6}")
result6 = ternary_search(arr6, 0, len(arr6) - 1, x6)
print(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {result6}")

# =============================================================================
# –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–ë–û–¢–´ –í–°–ï–• –ê–õ–ì–û–†–ò–¢–ú–û–í
# =============================================================================

print("\n" + "=" * 60)
print("–°–í–û–î–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–ë–û–¢–´ –ê–õ–ì–û–†–ò–¢–ú–û–í")
print("=" * 60)

print("\n‚úÖ –í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
print(f"   ‚Ä¢ –ë–ª–æ—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {result1}")
print(f"   ‚Ä¢ –ë–ª–∏–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {result2}")
print(f"   ‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É—Å–∏–Ω–∞–º–∏: {result3}")

print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
print(f"   ‚Ä¢ –ü–æ–∏—Å–∫ —Å–∫–∞—á–∫–∞–º–∏: —ç–ª–µ–º–µ–Ω—Ç 9 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {result4}")
print(f"   ‚Ä¢ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: —ç–ª–µ–º–µ–Ω—Ç 11 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {result5}")
print(f"   ‚Ä¢ –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫: —ç–ª–µ–º–µ–Ω—Ç 7 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {result6}")

print("\n" + "=" * 60)
print("–í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ –ê–õ–ì–û–†–ò–¢–ú–û–í")
print("=" * 60)

print("""
–°–û–†–¢–ò–†–û–í–ö–ê:
‚Ä¢ –ë–ª–æ—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: O(n + k)
‚Ä¢ –ë–ª–∏–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: O(n¬≤)
‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É—Å–∏–Ω–∞–º–∏: O(n + S)

–ü–û–ò–°–ö:
‚Ä¢ –ü–æ–∏—Å–∫ —Å–∫–∞—á–∫–∞–º–∏: O(‚àön)
‚Ä¢ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: O(log n)
‚Ä¢ –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫: O(log‚ÇÉ n)
""")

print("üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
