Временная сложность алгоритма:
Теперь давайте разберемся с временной сложностью нашего алгоритма в обозначениях Big O Notation.
Лучшая ситуация: даже если массив уже отсортирован, алгоритм всё равно выполнит оба цикла полностью, потому что он сравнивает каждый элемент независимо от состояния массива. Таким образом, лучшая ситуация такая же, как худшая и средняя ситуации.
Средняя ситуация: среднее количество операций сравнения и обменов такое же, как в худшем случае.
Худшая ситуация: выполняется максимальное число сравнений и возможных обменов. Это происходит тогда, когда массив изначально отсортирован в обратном порядке.
Для оценки временных затрат обратимся к количеству итераций обоих циклов:
Внешний цикл запускается ровно n раз (n — длина массива).
Во внутреннем цикле каждая итерация обрабатывает уменьшающийся диапазон (от n−1, n−2, ..., 1). Среднее количество шагов примерно (n−1)/2.
Итого общее количество сравнений пропорционально сумме первых n−1 натуральных чисел: Общее количество сравнений≈ n(n−1)/
​Это выражение является квадратичным относительно размера массива, следовательно, временная сложность равна O(n^2)
Итоговая оценка временной сложности:
Временная сложность алгоритма сортировки выбором составляет O(n^2) для любого сценария работы (лучшего, среднего и худшего случая). Этот алгоритм прост в понимании и реализации, однако неэффективен для больших объемов данных, так как растет квадратично с увеличением размеров массива.
